# Copyright 2017 by the contributors
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'QS(5042) Kubernetes AWS CloudFormation Template: Create a Kubernetes
  cluster in a new VPC. The master node is an auto-recovering Amazon EC2
  instance. 1-20 additional EC2 instances in an AutoScalingGroup join the
  Kubernetes cluster as nodes. An ELB provides configurable external access
  to the Kubernetes API. The new VPC includes a bastion host to grant
  SSH access to the private subnet for the cluster. This template creates
  two stacks: one for the new VPC and one for the cluster. The stack is
  suitable for development and small single-team clusters. **WARNING** This
  template creates four Amazon EC2 instances with default settings. You will
  be billed for the AWS resources used if you create a stack from this template.
  **SUPPORT** Please visit http://jump.heptio.com/aws-qs-help for support.
  **NEXT STEPS** Please visit http://jump.heptio.com/aws-qs-next.'

# The Metadata tells AWS how to display the parameters during stack creation
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Required
      Parameters:
      - AvailabilityZone
      - AdminIngressLocation
      - KeyName
    - Label:
        default: Advanced
      Parameters:
      - NetworkingProvider
      - K8sNodeCapacity
      - InstanceType
      - DiskSizeGb
      - BastionInstanceType
      - QSS3BucketName
      - QSS3KeyPrefix

    ParameterLabels:
      KeyName:
        default: SSH Key
      AvailabilityZone:
        default: Availability Zone
      AdminIngressLocation:
        default: Admin Ingress Location
      InstanceType:
        default: Instance Type
      F5InstanceType:
        default: Instance Type
      DiskSizeGb:
        default: Disk Size (GiB)
      BastionInstanceType:
        default: Instance Type (Bastion Host)
      K8sNodeCapacity:
        default: Node Capacity
      QSS3BucketName:
        default: S3 Bucket
      QSS3KeyPrefix:
        default: S3 Key Prefix
      NetworkingProvider:
        default: Networking Provider

# The Parameters allow the user to pass custom settings to the stack before creation
Parameters:
  KeyName:
    Description: Existing EC2 KeyPair for SSH access.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceType:
    Description: EC2 instance type for the cluster.
    Type: String
    Default: t2.medium
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.

  # Specifies the size of the root disk for all EC2 instances, including master
  # and nodes.
  DiskSizeGb:
    Description: 'Size of the root disk for the EC2 instances, in GiB.  Default: 40'
    Default: 40
    Type: Number
    MinValue: 8
    MaxValue: 1024

  BastionInstanceType:
    Description: EC2 instance type for the bastion host (used for public SSH access).
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.

  AvailabilityZone:
    Description: The Availability Zone for this cluster. Heptio recommends
      that you run one cluster per AZ and use tooling to coordinate across AZs.
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: must be the name of an AWS Availability Zone

  AdminIngressLocation:
    Description: CIDR block (IP address range) to allow SSH access to the 
      bastion host and HTTPS access to the Kubernetes API. Use 0.0.0.0/0
      to allow access from all locations.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  K8sNodeCapacity:
    Default: '2'
    Description: Initial number of Kubernetes nodes (1-20).
    Type: Number
    MinValue: '1'
    MaxValue: '20'
    ConstraintDescription: must be between 1 and 20 EC2 instances.

  # S3 Bucket configuration: allows users to use their own downstream snapshots
  # of the quickstart-aws-vpc and quickstart-linux-bastion templates
  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).

    Default: quickstart-reference
    Description: Only change this if you have set up assets, like your own networking
      configuration, in an S3 bucket. This and the S3 Key Prefix parameter let you access
      scripts from the scripts/ and templates/ directories of your own fork of the Heptio 
      Quick Start assets, uploaded to S3 and stored at
      ${bucketname}.s3.amazonaws.com/${prefix}/scripts/somefile.txt.S3. The bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  
  QSS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-]+(/[0-9a-zA-Z-]+)*$"
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/). It cannot start or end
      with forward slash (/) because they are automatically appended.
    Default: heptio/latest
    Description: Only change this if you have set up assets in an S3 bucket, as explained
      in the S3 Bucket parameter. The S3 key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slashes (/). It cannot start or end with
      forward slashes (/) because they are automatically appended.
    Type: String

  NetworkingProvider:
    AllowedValues:
    - calico
    - weave
    ConstraintDescription: 'Currently supported values are "calico" and "weave"'
    Default: calico
    Description: Choose the networking provider to use for communication between
      pods in the Kubernetes cluster. Supported configurations are calico 
      (http://docs.projectcalico.org/v2.0/getting-started/kubernetes/installation/hosted/kubeadm/)
      and weave (https://github.com/weaveworks/weave/blob/master/site/kube-addon.md).
    Type: String

Mappings:
  RegionMap:
    ap-northeast-1:
      '64': ami-18afc47f
    ap-northeast-2:
      '64': ami-93d600fd
    ap-south-1:
      '64': ami-dd3442b2
    ap-southeast-1:
      '64': ami-87b917e4
    ap-southeast-2:
      '64': ami-e6b58e85
    ca-central-1:
      '64': ami-7112a015
    eu-central-1:
      '64': ami-fe408091
    eu-west-1:
      '64': ami-ca80a0b9
    eu-west-2:
      '64': ami-ede2e889
    sa-east-1:
      '64': ami-e075ed8c
    us-east-1:
      '64': ami-9dcfdb8a
    us-east-2:
      '64': ami-fcc19b99
    us-west-1:
      '64': ami-b05203d0
    us-west-2:
      '64': ami-b2d463d2

Conditions:
  UsEast1Condition:
    Fn::Equals:
    - !Ref AWS::Region
    - "us-east-1"

Resources:
  # Resources for new VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName

  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName:
        # us-east-1 needs .ec2.internal, the rest of the regions get <region>.compute.internal.
        # See http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html
        Fn::If:
        - UsEast1Condition
        - "ec2.internal"
        - !Sub "${AWS::Region}.compute.internal"
      DomainNameServers:
      - AmazonProvidedDNS

  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref DHCPOptions

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Network
        Value: Public

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.0.0/19'
      AvailabilityZone: !Ref AvailabilityZone
      Tags:
      - Key: Name
        Value: Private subnet
      - Key: Network
        Value: Private

  ManagementSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.254.0/24'
      AvailabilityZone: !Ref AvailabilityZone
      Tags:
      - Key: Name
        Value: Management subnet
      - Key: Network
        Value: Management

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.128.0/20'
      AvailabilityZone: !Ref AvailabilityZone
      Tags:
      - Key: Name
        Value: Public subnet
      - Key: Network
        Value: Public
      - Key: KubernetesCluster
        Value: !Ref AWS::StackName
      MapPublicIpOnLaunch: true

  # The NAT IP for the private subnet, as seen from within the public one
  NATEIP:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # The NAT gateway for the private subnet
  NATGateway:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATEIP.AllocationId
      SubnetId: !Ref PublicSubnet

  PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private subnets
      - Key: Network
        Value: Private

  PrivateSubnetRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateSubnetRouteTable

  ManagementSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Management subnets
      - Key: Network
        Value: Management

  ManagementSubnetRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ManagementSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  ManagementSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ManagementSubnet
      RouteTableId: !Ref ManagementSubnetRouteTable

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Subnets
      - Key: Network
        Value: Public

  PublicSubnetRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicSubnetRouteTable

  # Taken from github.com/aws-quickstart/quickstart-linux-bastion.  We don't
  # call it directly because that quickstart forces 2 bastion hosts and we only
  # want one
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - Ref: AWS::Region
        - '64'
      InstanceType: !Ref BastionInstanceType
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeleteOnTermination: true
        DeviceIndex: 0
        SubnetId: !Ref PublicSubnet
        # This address is chosen because our public subnet begins at 10.0.128.0/20
        PrivateIpAddress: '10.0.128.5'
        GroupSet:
        - Ref: BastionSecurityGroup
      Tags:
      - Key: Name
        Value: bastion-host
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash

            BASTION_BOOTSTRAP_FILE=bastion_bootstrap.sh
            BASTION_BOOTSTRAP=https://s3.amazonaws.com/quickstart-reference/linux/bastion/latest/scripts/bastion_bootstrap.sh

            curl -s -o $BASTION_BOOTSTRAP_FILE $BASTION_BOOTSTRAP
            chmod +x $BASTION_BOOTSTRAP_FILE

            ./$BASTION_BOOTSTRAP_FILE --banner https://${QSS3BucketName}/${QSS3KeyPrefix}/scripts/banner_message.txt --enable true

  # Open up port 22 for SSH for the bastion host
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref AdminIngressLocation
  
  # Call the cluster template and supply its parameters
  # This creates a second stack that creates the actual Kubernetes cluster
  # within the new VPC
  K8sStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/kubernetes-cluster.template"
      Parameters:
        VPCID: !Ref VPC
        AvailabilityZone: !Ref AvailabilityZone
        InstanceType: !Ref InstanceType
        DiskSizeGb: !Ref DiskSizeGb
        ClusterSubnetId: !Ref PrivateSubnet
        # Direct SSH access only from the bastion host itself
        SSHLocation: !Sub "${BastionHost.PrivateIp}/32"
        ApiLbLocation: !Ref AdminIngressLocation
        KeyName: !Ref KeyName
        K8sNodeCapacity: !Ref K8sNodeCapacity
        QSS3BucketName: !Ref QSS3BucketName
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        ClusterAssociation: !Ref AWS::StackName
        NetworkingProvider: !Ref NetworkingProvider
        LoadBalancerSubnetId: !Ref PublicSubnet

Outputs:
  # Outputs from VPC creation
  VPCID:
    Description: ID of the newly-created EC2 VPC.
    Value: !Ref VPC

  BastionHostPublicIp:
    Description: IP Address of the bastion host for the newly-created EC2 VPC.
    Value: !GetAtt BastionHost.PublicIp

  BastionHostPublicDNS:
    Description: Public DNS FQDN of the bastion host for the newly-created EC2 VPC.
    Value: !GetAtt BastionHost.PublicDnsName

  SSHProxyCommand:
    Description: Run locally - SSH command to proxy to the master instance
      through the bastion host, to access port 8080 (command to SSH to the master Kubernetes node).
    Value: !Sub >-
      SSH_KEY="path/to/${KeyName}.pem";
      ssh
      -i $SSH_KEY
      -A -L8080:localhost:8080
      -o ProxyCommand="ssh -i \"${!SSH_KEY}\" ubuntu@${BastionHost.PublicIp} nc %h %p"
      ubuntu@${K8sStack.Outputs.MasterPrivateIp}

  GetKubeConfigCommand:
    Description: Run locally - SCP command to download the Kubernetes configuration
      file for accessing the new cluster via kubectl, a Kubernetes command line tool.
      Creates a "kubeconfig" file in the current directory. Then, you can run
      "export KUBECONFIG=$(pwd)/kubeconfig" to ensure kubectl uses this configuration file.
      About kubectl - https://kubernetes.io/docs/user-guide/prereqs/ 
    Value: !Sub >-
      SSH_KEY="path/to/${KeyName}.pem";
      scp
      -i $SSH_KEY
      -o ProxyCommand="ssh -i \"${!SSH_KEY}\" ubuntu@${BastionHost.PublicIp} nc %h %p"
      ubuntu@${K8sStack.Outputs.MasterPrivateIp}:~/kubeconfig ./kubeconfig

  # Outputs forwarded from the k8s template
  MasterInstanceId:
    Description: InstanceId of the master EC2 instance.
    Value: !GetAtt K8sStack.Outputs.MasterInstanceId

  MasterPrivateIp:
    Description: Private IP address of the master.
    Value: !GetAtt K8sStack.Outputs.MasterPrivateIp

  NodeGroupInstanceId:
    Description: InstanceId of the newly-created NodeGroup.
    Value: !GetAtt K8sStack.Outputs.NodeGroupInstanceId

  JoinNodes:
    Description: Command to join more nodes to this cluster.
    Value: !GetAtt K8sStack.Outputs.JoinNodes

  NextSteps:
    Description: Verify your cluster and deploy a test application. Instructions -
      http://jump.heptio.com/aws-qs-next
    Value: !GetAtt K8sStack.Outputs.NextSteps
Conditions:
  optin: !Equals 
    - 'Yes'
    - !Ref allowUsageAnalytics
Description: >-
  Template Version 2.6.0: AWS CloudFormation Template for creating a 3NIC BIG-IP
  in an existing VPC **WARNING** This template creates Amazon EC2 Instances. You
  will be billed for the AWS resources used if you create a stack from this
  template.
Mappings:
  BigipRegionMap:
    ap-northeast-1:
      Best: ami-eb1d2c8c
      Better: ami-54192833
      Good: ami-c31a2ba4
    ap-northeast-2:
      Best: ami-dcdf02b2
      Better: ami-23a27f4d
      Good: ami-14de037a
    ap-south-1:
      Best: ami-0ed4a661
      Better: ami-fed9ab91
      Good: ami-7bd8aa14
    ap-southeast-1:
      Best: ami-9b08b2f8
      Better: ami-f209b391
      Good: ami-5b09b338
    ap-southeast-2:
      Best: ami-67d8d304
      Better: ami-1fdfd47c
      Good: ami-10dfd473
    ca-central-1:
      Best: ami-42922e26
      Better: ami-b2962ad6
      Good: ami-f98d319d
    eu-central-1:
      Best: ami-c74e91a8
      Better: ami-524d923d
      Good: ami-ed518e82
    eu-west-1:
      Best: ami-e8a2af8e
      Better: ami-62a1ac04
      Good: ami-1bbfb27d
    eu-west-2:
      Best: ami-dba7b3bf
      Better: ami-faa0b49e
      Good: ami-4da5b129
    sa-east-1:
      Best: ami-7d8ee211
      Better: ami-248de148
      Good: ami-2e8de142
    us-east-1:
      Best: ami-4c76185a
      Better: ami-46781650
      Good: ami-44751b52
    us-east-2:
      Best: ami-2be6c14e
      Better: ami-d31a3db6
      Good: ami-2ae6c14f
    us-west-1:
      Best: ami-e56d4b85
      Better: ami-766c4a16
      Good: ami-7d6a4c1d
    us-west-2:
      Best: ami-a4bc27c4
      Better: ami-e3be2583
      Good: ami-fdb3289d
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: NETWORKING CONFIGURATION
        Parameters:
          - Vpc
          - managementSubnetAz1
          - managementSubnetAz2
          - subnet1Az1
          - subnet1Az2
          - subnet2Az1
          - availabilityZone1
          - availabilityZone2
      - Label:
          default: INSTANCE CONFIGURATION
        Parameters:
          - imageName
          - instanceType
          - applicationInstanceType
          - licenseKey1
          - licenseKey2
          - managementGuiPort
          - sshKey
          - restrictedSrcAddress
          - restrictedSrcAddressApp
          - ntpServer
          - timezone
      - Label:
          default: TAGS
        Parameters:
          - application
          - environment
          - group
          - owner
          - costcenter
      - Label:
          default: ''
        Parameters: []
      - Label:
          default: TEMPLATE ANALYTICS
        Parameters:
          - allowUsageAnalytics
    ParameterLabels:
      Vpc:
        default: VPC
      allowUsageAnalytics:
        default: Send Anonymous Statistics to F5
      application:
        default: Application
      applicationInstanceType:
        default: Application Instance Type
      availabilityZone1:
        default: Availability Zone 1
      availabilityZone2:
        default: Availability Zone 2
      bigiqAddress:
        default: BIG-IQ address
      bigiqLicensePoolName:
        default: BIG-IQ License Pool Name
      bigiqPasswordS3Arn:
        default: S3 ARN of the BIG-IQ Password File
      bigiqUsername:
        default: BIG-IQ user with Licensing Privileges
      costcenter:
        default: Cost Center
      environment:
        default: Environment
      group:
        default: Group
      imageName:
        default: BIG-IP Image Name
      instanceType:
        default: AWS Instance Size
      licenseKey1:
        default: License Key 1
      licenseKey2:
        default: License Key 2
      managementGuiPort:
        default: BIG-IP Management Port
      managementSubnetAz1:
        default: Management Subnet AZ1
      managementSubnetAz2:
        default: Management Subnet AZ2
      ntpServer:
        default: NTP Server
      owner:
        default: Owner
      restrictedSrcAddress:
        default: Source Address(es) for Management Access
      restrictedSrcAddressApp:
        default: Source Address(es) for Web Application Access (80/443)
      sshKey:
        default: SSH Key
      subnet1Az1:
        default: Subnet1 in AZ1
      subnet1Az2:
        default: Subnet1 in AZ2
      subnet2Az1:
        default: Subnet2 in AZ1
      timezone:
        default: Timezone (Olson)
  Version: 2.6.0
  'AWS::CloudFormation::Designer':
    58f18cac-a8d3-45e1-8f96-0d2cdc8c70ba:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 90
      z: 1
      embeds: []
    ddf14348-d0bd-49cc-897a-426c6fd4fdf3:
      size:
        width: 60
        height: 60
      position:
        x: 180
        'y': 90
      z: 1
      embeds: []
      isassociatedwith:
        - 58f18cac-a8d3-45e1-8f96-0d2cdc8c70ba
    ac6c3010-8d8f-486c-b4f9-74ef5a8e5850:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 210
      z: 1
      embeds: []
    cc9bb70d-8a23-474d-b391-928ddc33a8d3:
      size:
        width: 60
        height: 60
      position:
        x: 180
        'y': 210
      z: 1
      embeds: []
    d737fa02-386e-4d48-95c5-26f7afe541f8:
      size:
        width: 60
        height: 60
      position:
        x: 300
        'y': 90
      z: 1
      embeds: []
    ad3f13a6-2a21-4805-8578-42a436b09b57:
      size:
        width: 60
        height: 60
      position:
        x: 300
        'y': 210
      z: 1
      embeds: []
    77dfc7bc-6631-4783-b45a-810917ada87a:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 330
      z: 1
      embeds: []
      isassociatedwith:
        - d737fa02-386e-4d48-95c5-26f7afe541f8
    f70c0b2d-5d46-4cc3-87d5-f04448792305:
      source:
        id: ad3f13a6-2a21-4805-8578-42a436b09b57
      target:
        id: 77dfc7bc-6631-4783-b45a-810917ada87a
    a452c05a-4c3f-465e-b777-558650688a80:
      size:
        width: 60
        height: 60
      position:
        x: 180
        'y': 330
      z: 1
      embeds: []
    78f6773d-ca82-4804-b28e-0ad45310fe55:
      source:
        id: a452c05a-4c3f-465e-b777-558650688a80
      target:
        id: 77dfc7bc-6631-4783-b45a-810917ada87a
    db031350-6469-4700-b56a-5873987a52fe:
      size:
        width: 60
        height: 60
      position:
        x: 300
        'y': 330
      z: 1
      embeds: []
      isassociatedwith:
        - ac6c3010-8d8f-486c-b4f9-74ef5a8e5850
    2f97a2ec-6476-46c8-a556-a76f9877c15d:
      size:
        width: 60
        height: 60
      position:
        x: 420
        'y': 90
      z: 1
      embeds: []
    e5233974-69ba-4126-8cec-b5c44c7b0aea:
      source:
        id: 2f97a2ec-6476-46c8-a556-a76f9877c15d
      target:
        id: db031350-6469-4700-b56a-5873987a52fe
    44ab1718-9f5d-47cf-b0bf-8c3d04ff7aba:
      size:
        width: 60
        height: 60
      position:
        x: 420
        'y': 210
      z: 1
      embeds: []
      isassociatedwith:
        - cc9bb70d-8a23-474d-b391-928ddc33a8d3
    ff54359c-3de0-468c-9740-263080816e7c:
      size:
        width: 60
        height: 60
      position:
        x: 420
        'y': 330
      z: 1
      embeds: []
      isassociatedwith:
        - db031350-6469-4700-b56a-5873987a52fe
        - 77dfc7bc-6631-4783-b45a-810917ada87a
        - 44ab1718-9f5d-47cf-b0bf-8c3d04ff7aba
      isrelatedto:
        - ddf14348-d0bd-49cc-897a-426c6fd4fdf3
Outputs:
  Bigip1ExternalInterfacePrivateIp:
    Description: Internally routable IP of the public interface on BIG-IP
    Value: !GetAtt 
      - Bigip1subnet1Az1Interface
      - PrimaryPrivateIpAddress
  Bigip1InstanceId:
    Description: Instance Id of BIG-IP in Amazon
    Value: !Ref Bigip1Instance
  Bigip1InternalInterface:
    Description: Internal interface ID on BIG-IP
    Value: !Ref Bigip1InternalInterface
  Bigip1InternalInterfacePrivateIp:
    Description: Internally routable IP of internal interface on BIG-IP
    Value: !GetAtt 
      - Bigip1InternalInterface
      - PrimaryPrivateIpAddress
  Bigip1ManagementEipAddress:
    Description: IP address of the management port on BIG-IP
    Value: !Ref Bigip1ManagementEipAddress
  Bigip1ManagementInterface:
    Description: Management interface ID on BIG-IP
    Value: !Ref Bigip1ManagementInterface
  Bigip1ManagementInterfacePrivateIp:
    Description: Internally routable IP of the management interface on BIG-IP
    Value: !GetAtt 
      - Bigip1ManagementInterface
      - PrimaryPrivateIpAddress
  Bigip1Url:
    Description: BIG-IP Management GUI
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt 
          - Bigip1Instance
          - PublicIp
  Bigip1VipEipAddress:
    Description: EIP address for VIP
    Value: !Join 
      - ''
      - - 'http://'
        - !Ref Bigip1VipEipAddress
        - ':80'
  Bigip1VipPrivateIp:
    Description: VIP on External Interface Secondary IP 1
    Value: !Select 
      - '0'
      - !GetAtt 
        - Bigip1subnet1Az1Interface
        - SecondaryPrivateIpAddresses
  Bigip1subnet1Az1Interface:
    Description: External interface Id on BIG-IP
    Value: !Ref Bigip1subnet1Az1Interface
  Bigip1subnet1Az1SelfEipAddress:
    Description: IP Address of the External interface attached to BIG-IP
    Value: !Ref Bigip1subnet1Az1SelfEipAddress
  availabilityZone1:
    Description: Availability Zone
    Value: !GetAtt 
      - Bigip1Instance
      - AvailabilityZone
  bigipExternalSecurityGroup:
    Description: Public or External Security Group
    Value: !Ref bigipExternalSecurityGroup
  bigipInternalSecurityGroup:
    Description: Private or Internal Security Group
    Value: !Ref bigipInternalSecurityGroup
  bigipManagementSecurityGroup:
    Description: Management Security Group
    Value: !Ref bigipManagementSecurityGroup
Parameters:
  Vpc:
    ConstraintDescription: This must be an existing VPC within the working region.
    Type: 'AWS::EC2::VPC::Id'
  allowUsageAnalytics:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Description: >-
      This deployment can send anonymous statistics to F5 to help us determine
      how to improve our solutions. If you select **No** statistics are not
      sent.
    Type: String
  application:
    Default: f5app
    Description: Name of the Application Tag
    Type: String
  costcenter:
    Default: f5costcenter
    Description: Name of the Cost Center Tag
    Type: String
  environment:
    Default: f5env
    Description: Name of the Environment Tag
    Type: String
  group:
    Default: f5group
    Description: Name of the Group Tag
    Type: String
  imageName:
    AllowedValues:
      - Good
      - Better
      - Best
    ConstraintDescription: Must be a valid F5 BIG-IP VE image type
    Default: Best
    Description: F5 BIG-IP Performance Type
    Type: String
  instanceType:
    AllowedValues:
      - t2.medium
      - t2.large
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
    ConstraintDescription: Must be a valid EC2 instance type for BIG-IP
    Default: m3.2xlarge
    Description: Size of the F5 BIG-IP Virtual Instance
    Type: String
  licenseKey1:
    AllowedPattern: >-
      ([\x41-\x5A][\x41-\x5A|\x30-\x39]{4})\-([\x41-\x5A|\x30-\x39]{5})\-([\x41-\x5A|\x30-\x39]{5})\-([\x41-\x5A|\x30-\x39]{5})\-([\x41-\x5A|\x30-\x39]{7})
    ConstraintDescription: Verify your F5 BYOL regkey.
    Description: F5 BYOL license key
    MaxLength: '255'
    MinLength: '1'
    Type: String
  managementSubnetAz1:
    ConstraintDescription: The subnet ID must be within an existing VPC
    Description: Management Subnet ID
    Type: 'AWS::EC2::Subnet::Id'
  ntpServer:
    Default: 0.pool.ntp.org
    Description: NTP server for this implementation
    Type: String
  owner:
    Default: f5owner
    Description: Name of the Owner Tag
    Type: String
  restrictedSrcAddress:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: ' The IP address range used to SSH and access managment GUI on the EC2 instances'
    MaxLength: '18'
    MinLength: '9'
    Type: String
  restrictedSrcAddressApp:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: ' The IP address range that can be used to access web traffic (80/443) to the EC2 instances'
    MaxLength: '18'
    MinLength: '9'
    Type: String
  sshKey:
    Description: Key pair for accessing the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
  subnet1Az1:
    ConstraintDescription: The subnet ID must be within an existing VPC
    Description: Public or External subnet
    Type: 'AWS::EC2::Subnet::Id'
  subnet2Az1:
    ConstraintDescription: The subnet ID must be within an existing VPC
    Description: Private or Internal subnet ID
    Type: 'AWS::EC2::Subnet::Id'
  timezone:
    Default: UTC
    Description: Olson timezone string from /usr/share/zoneinfo
    Type: String
Resources:
  Bigip1Instance:
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          commands:
            001-disable-1nicautoconfig:
              command: /usr/bin/setdb provision.1nicautoconfig disable
            002-install-libs:
              command: !Join 
                - ' '
                - - nohup /config/installCloudLibs.sh
                  - '&>> /var/log/cloudlibs-install.log < /dev/null &'
            003-generate-password:
              command: !Join 
                - ''
                - - nohup /config/waitThenRun.sh
                  - ' f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/runScript.js'
                  - ' --signal PASSWORD_CREATED'
                  - ' --file f5-rest-node'
                  - ' --cl-args ''/config/cloud/aws/node_modules/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword'''
                  - ' --log-level verbose'
                  - ' -o /var/log/generatePassword.log'
                  - ' &>> /var/log/cloudlibs-install.log < /dev/null'
                  - ' &'
            004-create-admin-user:
              command: !Join 
                - ''
                - - nohup /config/waitThenRun.sh
                  - ' f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/runScript.js'
                  - ' --wait-for PASSWORD_CREATED'
                  - ' --signal ADMIN_CREATED'
                  - ' --file /config/cloud/aws/node_modules/f5-cloud-libs/scripts/createUser.sh'
                  - ' --cl-args ''--user admin'
                  - ' --password-file /config/cloud/aws/.adminPassword'
                  - ''''
                  - ' --log-level verbose'
                  - ' -o /var/log/createUser.log'
                  - ' &>> /var/log/cloudlibs-install.log < /dev/null'
                  - ' &'
            005-network-config:
              command: !Join 
                - ''
                - - >-
                    GATEWAY_MAC=`ifconfig eth1 | egrep HWaddr | awk '{print
                    tolower($5)}'`; 
                  - >-
                    GATEWAY_CIDR_BLOCK=`curl -s -f --retry 20
                    http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`; 
                  - 'GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}; '
                  - 'GATEWAY_PREFIX=${GATEWAY_CIDR_BLOCK#*/}; '
                  - >-
                    GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print
                    $1"."$2"."$3"."$4+1 }'`; 
                  - >-
                    GATEWAY_MAC2=`ifconfig eth2 | egrep HWaddr | awk '{print
                    tolower($5)}'`; 
                  - >-
                    GATEWAY_CIDR_BLOCK2=`curl -s -f --retry 20
                    http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC2}/subnet-ipv4-cidr-block`; 
                  - 'GATEWAY_PREFIX2=${GATEWAY_CIDR_BLOCK2#*/}; '
                  - 'nohup /config/waitThenRun.sh '
                  - >-
                    f5-rest-node
                    /config/cloud/aws/node_modules/f5-cloud-libs/scripts/network.js 
                  - '--host localhost '
                  - '--user admin '
                  - '--password-url file:///config/cloud/aws/.adminPassword '
                  - '-o /var/log/network-config.log '
                  - '--log-level debug '
                  - '--wait-for ADMIN_CREATED '
                  - '--signal NETWORK_CONFIG_DONE '
                  - '--vlan name:external,nic:1.1 '
                  - '--default-gw ${GATEWAY} '
                  - '--self-ip name:external-self,address:'
                  - !GetAtt 
                    - Bigip1subnet1Az1Interface
                    - PrimaryPrivateIpAddress
                  - '/${GATEWAY_PREFIX},vlan:external '
                  - '--vlan name:internal,nic:1.2 '
                  - '--self-ip name:internal-self,address:'
                  - !GetAtt 
                    - Bigip1InternalInterface
                    - PrimaryPrivateIpAddress
                  - '/${GATEWAY_PREFIX2},vlan:internal '
                  - '&>> /var/log/cloudlibs-install.log < /dev/null &'
            006-onboard-BIG-IP:
              command: !If 
                - optin
                - !Join 
                  - ' '
                  - - REGION="
                    - !Ref 'AWS::Region'
                    - '";'
                    - DEPLOYMENTID=`echo "
                    - !Ref 'AWS::StackId'
                    - '"|sha512sum|cut -d " " -f 1`;'
                    - CUSTOMERID=`echo "
                    - !Ref 'AWS::AccountId'
                    - '"|sha512sum|cut -d " " -f 1`;'
                    - NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;
                    - nohup /config/waitThenRun.sh
                    - >-
                      f5-rest-node
                      /config/cloud/aws/node_modules/f5-cloud-libs/scripts/onboard.js
                    - '--wait-for NETWORK_CONFIG_DONE'
                    - '-o /var/log/onboard.log'
                    - '--log-level debug'
                    - '--no-reboot'
                    - '--host localhost'
                    - '--user admin'
                    - '--password-url file:///config/cloud/aws/.adminPassword'
                    - >-
                      --hostname `curl -s -f --retry 20
                      http://169.254.169.254/latest/meta-data/hostname`
                    - '--ntp '
                    - !Ref ntpServer
                    - '--tz '
                    - !Ref timezone
                    - '--dns ${NAME_SERVER}'
                    - '--module ltm:nominal'
                    - '--license '
                    - !Ref licenseKey1
                    - >-
                      --metrics
                      "cloudName:aws,region:${REGION},bigipVersion:13.0.0.2.0.1671,customerId:${CUSTOMERID},deploymentId:${DEPLOYMENTID},templateName:f5-existing-stack-byol-3nic-bigip.template,templateVersion:2.6.0,licenseType:byol"
                    - '--ping'
                    - '&>> /var/log/cloudlibs-install.log < /dev/null &'
                - !Join 
                  - ' '
                  - - NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;
                    - nohup /config/waitThenRun.sh
                    - >-
                      f5-rest-node
                      /config/cloud/aws/node_modules/f5-cloud-libs/scripts/onboard.js
                    - '--wait-for NETWORK_CONFIG_DONE'
                    - '-o /var/log/onboard.log'
                    - '--log-level debug'
                    - '--no-reboot'
                    - '--host localhost'
                    - '--user admin'
                    - '--password-url file:///config/cloud/aws/.adminPassword'
                    - >-
                      --hostname `curl -s -f --retry 20
                      http://169.254.169.254/latest/meta-data/hostname`
                    - '--ntp '
                    - !Ref ntpServer
                    - '--tz '
                    - !Ref timezone
                    - '--dns ${NAME_SERVER}'
                    - '--module ltm:nominal'
                    - '--license '
                    - !Ref licenseKey1
                    - '--ping'
                    - '&>> /var/log/cloudlibs-install.log < /dev/null &'
            007-custom-config:
              command: !Join 
                - ' '
                - - nohup /config/waitThenRun.sh
                  - >-
                    f5-rest-node
                    /config/cloud/aws/node_modules/f5-cloud-libs/scripts/runScript.js
                  - '--file /config/cloud/aws/custom-config.sh'
                  - '--cwd /config/cloud/aws'
                  - '-o /var/log/custom-config.log'
                  - '--log-level debug'
                  - '--wait-for ONBOARD_DONE'
                  - '--signal CUSTOM_CONFIG_DONE'
                  - '&>> /var/log/cloudlibs-install.log < /dev/null &'
            008-cluster:
              command: !Join 
                - ' '
                - []
            009-rm-password:
              command: !Join 
                - ' '
                - - nohup /config/waitThenRun.sh
                  - >-
                    f5-rest-node
                    /config/cloud/aws/node_modules/f5-cloud-libs/scripts/runScript.js
                  - '--file /config/cloud/aws/rm-password.sh'
                  - '-o /var/log/rm-password.log'
                  - '--log-level debug'
                  - '--wait-for CUSTOM_CONFIG_DONE'
                  - '--signal PASSWORD_REMOVED'
                  - '&>> /var/log/cloudlibs-install.log < /dev/null &'
          files:
            /config/cloud/aws/custom-config.sh:
              content: !Join 
                - ''
                - - |
                    #!/bin/bash
                  - |
                    PROGNAME=$(basename $0)
                  - |
                    function error_exit {
                  - |
                    echo "${PROGNAME}: ${1:-\"Unknown Error\"}" 1>&2
                  - |
                    exit 1
                  - |
                    }
                  - |
                    declare -a tmsh=()
                  - |
                    date
                  - |
                    echo 'starting custom-config.sh'
                  - |
                    tmsh+=(
                  - >
                    "tmsh load sys application template
                    /config/cloud/aws/f5.service_discovery.tmpl"
                  - |
                    "tmsh save /sys config")
                  - |
                    for CMD in "${tmsh[@]}"
                  - |
                    do
                  - |2
                        if $CMD;then
                  - |2
                            echo "command $CMD successfully executed."
                  - |2
                        else
                  - |2
                            error_exit "$LINENO: An error has occurred while executing $CMD. Aborting!"
                  - |2
                        fi
                  - |
                    done
                  - |
                    date
                  - |
                    ### START CUSTOM CONFIGURTION
                  - '### END CUSTOM CONFIGURATION'
              group: root
              mode: '000755'
              owner: root
            /config/cloud/aws/f5.service_discovery.tmpl:
              group: root
              mode: '000755'
              owner: root
              source: >-
                https://raw.githubusercontent.com/F5Networks/f5-cloud-iapps/v1.1.1/f5-service-discovery/f5.service_discovery.tmpl
            /config/cloud/aws/getNameServer.sh:
              content: !Join 
                - |+

                - - INTERFACE=$1
                  - >-
                    INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep HWaddr | awk
                    '{print tolower($5)}'`
                  - >-
                    VPC_CIDR_BLOCK=`curl -s -f --retry 20
                    http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`
                  - 'VPC_NET=${VPC_CIDR_BLOCK%/*}'
                  - >-
                    NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf
                    "%d.%d.%d.%d", $1, $2, $3, $4+2 }'`
                  - echo $NAME_SERVER
              group: root
              mode: '000755'
              owner: root
            /config/cloud/aws/rm-password.sh:
              content: !Join 
                - ''
                - - |
                    #!/bin/bash
                  - |
                    PROGNAME=$(basename $0)
                  - |
                    function error_exit {
                  - |
                    echo "${PROGNAME}: ${1:-"Unknown Error"}" 1>&2
                  - |
                    exit 1
                  - |
                    }
                  - |
                    date
                  - |
                    echo 'starting rm-password.sh'
                  - |
                    declare -a tmsh=()
                  - |
                    tmsh+=("rm /config/cloud/aws/.adminPassword")
                  - |
                    for CMD in "${tmsh[@]}"
                  - |
                    do
                  - |2
                      if $CMD;then
                  - |2
                          echo "command $CMD successfully executed."
                  - |2
                      else
                  - |2
                          error_exit "$LINENO: An error has occurred while executing $CMD. Aborting!"
                  - |2
                      fi
                  - |
                    done
                  - |
                    date
              group: root
              mode: '000755'
              owner: root
            /config/cloud/f5-cloud-libs-aws.tar.gz:
              group: root
              mode: '000755'
              owner: root
              source: >-
                https://raw.githubusercontent.com/F5Networks/f5-cloud-libs-aws/v1.5.0/dist/f5-cloud-libs-aws.tar.gz
            /config/cloud/f5-cloud-libs.tar.gz:
              group: root
              mode: '000755'
              owner: root
              source: >-
                https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/v3.4.1/dist/f5-cloud-libs.tar.gz
            /config/installCloudLibs.sh:
              content: !Join 
                - |+

                - - '#!/bin/bash'
                  - echo about to execute
                  - checks=0
                  - 'while [ $checks -lt 120 ]; do echo checking mcpd'
                  - '    tmsh -a show sys mcp-state field-fmt | grep -q running'
                  - '    if [ $? == 0 ]; then'
                  - '        echo mcpd ready'
                  - '        break'
                  - '    fi'
                  - '    echo mcpd not ready yet'
                  - '    let checks=checks+1'
                  - '    sleep 10'
                  - done
                  - echo loading verifyHash script
                  - >-
                    #if ! tmsh load sys config merge file /config/verifyHash;
                    then
                  - '#    echo cannot validate signature of /config/verifyHash'
                  - '#    exit'
                  - '#fi'
                  - '#echo loaded verifyHash'
                  - >-
                    #declare -a
                    filesToVerify=("/config/cloud/f5-cloud-libs.tar.gz"
                    "/config/cloud/f5-cloud-libs-aws.tar.gz"
                    "/config/cloud/aws/f5.service_discovery.tmpl")
                  - '#for fileToVerify in "${filesToVerify[@]}"'
                  - '#do'
                  - '#    echo verifying "$fileToVerify"'
                  - >-
                    #    if ! tmsh run cli script verifyHash "$fileToVerify";
                    then
                  - '#        echo "$fileToVerify" is not valid'
                  - '#        exit 1'
                  - '#    fi'
                  - '#    echo verified "$fileToVerify"'
                  - '#done'
                  - mkdir -p /config/cloud/aws/node_modules
                  - echo expanding f5-cloud-libs.tar.gz
                  - >-
                    tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C
                    /config/cloud/aws/node_modules
                  - echo installing dependencies
                  - >-
                    tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C
                    /config/cloud/aws/node_modules/f5-cloud-libs/node_modules
                  - echo cloud libs install complete
                  - touch /config/cloud/cloudLibsReady
              group: root
              mode: '000755'
              owner: root
            /config/verifyHash:
              content: |-
                cli script /Common/verifyHash {
                proc script::run {} {
                        if {[catch {
                            set hashes(f5-cloud-libs.tar.gz) 5b5035fe7e1d98260be409cc29d65da49bcaaa9becb4124b308023ce8790439356a2b85de4ce5a4433532967e1d5f13379e98eeadcf251b607032f47481d832f
                            set hashes(f5-cloud-libs-aws.tar.gz) 279254b05d175df4ba1155fa810b3ea66a38e69198d7a6840ac9443ce730a5997e12c3b76af76ebadf13550d8bb0d45a5b09badfff4aac89e75d121bc166358d
                            set hashes(f5-cloud-libs-azure.tar.gz) 3c52145334fe80da577f980cdfbb1ef71fa4284b2f7fb4fa6f241cf50528e9fdc8df088a8312c3f6b90d3db198c787f7c10739e4098efb071cc29bf0ed70437b
                            set hashes(f5-cloud-libs-gce.tar.gz) 6ef33cc94c806b1e4e9e25ebb96a20eb1fe5975a83b2cd82b0d6ccbc8374be113ac74121d697f3bfc26bf49a55e948200f731607ce9aa9d23cd2e81299a653c1
                            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0
                            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034
                            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe
                            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d
                            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d
                            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396
                            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6
                            set hashes(deploy_waf.sh) 4c125f7cbc4d701cf50f03de479ebe99a08c2b2c3fa6aae3e229eb3f0bba98bb513d630368229c98e7c5c907e6a3168ece2f8f576267514bad4f6730ea14d454
                            set hashes(f5.policy_creator.tmpl) 54d265e0a573d3ae99864adf4e054b293644e48a54de1e19e8a6826aa32ab03bd04c7255fd9c980c3673e9cd326b0ced513665a91367add1866875e5ef3c4e3a
                            set hashes(f5.service_discovery.tmpl) d4008a2c5a7f26cc42eb5cbe2171e15e6e95afb1b34fb03d04f6c1b80f154d896e6faaa2e04fbb85fd8e0e51b479dbfcd286357ce0967b162233cc57e0138b96

                            set file_path [lindex $tmsh::argv 1]
                            set file_name [file tail $file_path]

                            if {![info exists hashes($file_name)]} {
                                tmsh::log err "No hash found for $file_name"
                                exit 1
                            }

                            set expected_hash $hashes($file_name)
                            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]
                            if { $expected_hash eq $computed_hash } {
                                exit 0
                            }
                            tmsh::log err "Hash does not match for $file_path"
                            exit 1
                        }]} {
                            tmsh::log err {Unexpected error in verifyHash}
                            exit 1
                        }
                    }
                    script-signature QyT1FQtNajuJkkmgI6ypFnbFu+JJw2UDV673xVwdt8LbE/aQ6JNS0QINerma90YU/uzj8ppThge5jttl3zSVYFkGXmHrvyDujdq50+/HfRnXBtieR+eW0Ro+4Kqfw83NLdebhsyRxJvfrzeAcJ/3VSnfmcERo/PKytcjtL5GFJpvUoaphfPz6YebbBg9VImBjfMBFczaWdKosLwriqG45Goh918lJLa6xYlLVRG+r+FJ9EXYaGty8jt/w4B0gl9oA4iqwmGPaB/GLBYgvek1tYeTl71wRRn/C8e0hsECqI0BAF6Yc7K06uzZcSYhTYQmMKIuebB/ckSdERzA3Mao+Q==
                    signing-key /Common/f5-irule
                }
              group: root
              mode: '000755'
              owner: root
            /config/waitThenRun.sh:
              content: !Join 
                - |+

                - - '#!/bin/bash'
                  - >-
                    while true; do echo "waiting for cloud libs install to
                    complete"
                  - '    if [ -f /config/cloud/cloudLibsReady ]; then'
                  - '        break'
                  - '    else'
                  - '        sleep 10'
                  - '    fi'
                  - done
                  - '"$@"'
              group: root
              mode: '000755'
              owner: root
      'AWS::CloudFormation::Designer':
        id: ff54359c-3de0-468c-9740-263080816e7c
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: 'true'
            VolumeType: gp2
        - DeviceName: /dev/xvdb
          NoDevice: {}
      IamInstanceProfile: !Ref bigipServiceDiscoveryProfile
      ImageId: !FindInMap 
        - BigipRegionMap
        - !Ref 'AWS::Region'
        - !Ref imageName
      InstanceType: !Ref instanceType
      KeyName: !Ref sshKey
      NetworkInterfaces:
        - Description: Management Interface
          DeviceIndex: '0'
          NetworkInterfaceId: !Ref Bigip1ManagementInterface
        - Description: Public or External Interface
          DeviceIndex: '1'
          NetworkInterfaceId: !Ref Bigip1subnet1Az1Interface
        - Description: Private or Internal Interface
          DeviceIndex: '2'
          NetworkInterfaceId: !Ref Bigip1InternalInterface
      Tags:
        - Key: Application
          Value: !Ref application
        - Key: Costcenter
          Value: !Ref costcenter
        - Key: Environment
          Value: !Ref environment
        - Key: Group
          Value: !Ref group
        - Key: Name
          Value: !Join 
            - ''
            - - 'Big-IP: '
              - !Ref 'AWS::StackName'
        - Key: Owner
          Value: !Ref owner
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - '/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-init -v -s '
            - !Ref 'AWS::StackId'
            - ' -r '
            - Bigip1Instance
            - ' --region '
            - !Ref 'AWS::Region'
            - |+

    Type: 'AWS::EC2::Instance'
  Bigip1InternalInterface:
    Properties:
      Description: Internal Interface for the BIG-IP
      GroupSet:
        - !Ref bigipInternalSecurityGroup
      SubnetId: !Ref subnet2Az1
    Type: 'AWS::EC2::NetworkInterface'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 44ab1718-9f5d-47cf-b0bf-8c3d04ff7aba
  Bigip1ManagementEipAddress:
    Properties:
      Domain: vpc
    Type: 'AWS::EC2::EIP'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 2f97a2ec-6476-46c8-a556-a76f9877c15d
  Bigip1ManagementEipAssociation:
    Properties:
      AllocationId: !GetAtt 
        - Bigip1ManagementEipAddress
        - AllocationId
      NetworkInterfaceId: !Ref Bigip1ManagementInterface
    Type: 'AWS::EC2::EIPAssociation'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: e5233974-69ba-4126-8cec-b5c44c7b0aea
  Bigip1ManagementInterface:
    Properties:
      Description: Management Interface for the BIG-IP
      GroupSet:
        - !Ref bigipManagementSecurityGroup
      SubnetId: !Ref managementSubnetAz1
    Type: 'AWS::EC2::NetworkInterface'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: db031350-6469-4700-b56a-5873987a52fe
  Bigip1VipEipAddress:
    Properties:
      Domain: vpc
    Type: 'AWS::EC2::EIP'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: a452c05a-4c3f-465e-b777-558650688a80
  Bigip1VipEipAssociation:
    Properties:
      AllocationId: !GetAtt 
        - Bigip1VipEipAddress
        - AllocationId
      NetworkInterfaceId: !Ref Bigip1subnet1Az1Interface
      PrivateIpAddress: !Select 
        - '0'
        - !GetAtt 
          - Bigip1subnet1Az1Interface
          - SecondaryPrivateIpAddresses
    Type: 'AWS::EC2::EIPAssociation'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 78f6773d-ca82-4804-b28e-0ad45310fe55
  Bigip1subnet1Az1Interface:
    Properties:
      Description: Public External Interface for the BIG-IP
      GroupSet:
        - !Ref bigipExternalSecurityGroup
      SecondaryPrivateIpAddressCount: '1'
      SubnetId: !Ref subnet1Az1
    Type: 'AWS::EC2::NetworkInterface'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 77dfc7bc-6631-4783-b45a-810917ada87a
  Bigip1subnet1Az1SelfEipAddress:
    Properties:
      Domain: vpc
    Type: 'AWS::EC2::EIP'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: ad3f13a6-2a21-4805-8578-42a436b09b57
  Bigip1subnet1Az1SelfEipAssociation:
    Properties:
      AllocationId: !GetAtt 
        - Bigip1subnet1Az1SelfEipAddress
        - AllocationId
      NetworkInterfaceId: !Ref Bigip1subnet1Az1Interface
      PrivateIpAddress: !GetAtt 
        - Bigip1subnet1Az1Interface
        - PrimaryPrivateIpAddress
    Type: 'AWS::EC2::EIPAssociation'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: f70c0b2d-5d46-4cc3-87d5-f04448792305
  bigipExternalSecurityGroup:
    Properties:
      GroupDescription: Public or external interface rules
      SecurityGroupIngress:
        - CidrIp: !Ref restrictedSrcAddressApp
          FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'
        - CidrIp: !Ref restrictedSrcAddressApp
          FromPort: '443'
          IpProtocol: tcp
          ToPort: '443'
      Tags:
        - Key: Application
          Value: !Ref application
        - Key: Costcenter
          Value: !Ref costcenter
        - Key: Environment
          Value: !Ref environment
        - Key: Group
          Value: !Ref group
        - Key: Name
          Value: !Join 
            - ''
            - - 'Bigip External Security Group:'
              - !Ref 'AWS::StackName'
        - Key: Owner
          Value: !Ref owner
      VpcId: !Ref Vpc
    Type: 'AWS::EC2::SecurityGroup'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: d737fa02-386e-4d48-95c5-26f7afe541f8
  bigipInternalSecurityGroup:
    Properties:
      GroupDescription: Allow All from Intra-VPC only
      Tags:
        - Key: Application
          Value: !Ref application
        - Key: Costcenter
          Value: !Ref costcenter
        - Key: Environment
          Value: !Ref environment
        - Key: Group
          Value: !Ref group
        - Key: Name
          Value: !Join 
            - ''
            - - 'Bigip Internal Security Group:'
              - !Ref 'AWS::StackName'
        - Key: Owner
          Value: !Ref owner
      VpcId: !Ref Vpc
    Type: 'AWS::EC2::SecurityGroup'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: cc9bb70d-8a23-474d-b391-928ddc33a8d3
  bigipManagementSecurityGroup:
    Properties:
      GroupDescription: BIG-IP management interface policy
      SecurityGroupIngress:
        - CidrIp: !Ref restrictedSrcAddress
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
        - CidrIp: !Ref restrictedSrcAddress
          FromPort: '443'
          IpProtocol: tcp
          ToPort: '443'
      Tags:
        - Key: Application
          Value: !Ref application
        - Key: Costcenter
          Value: !Ref costcenter
        - Key: Environment
          Value: !Ref environment
        - Key: Group
          Value: !Ref group
        - Key: Name
          Value: !Join 
            - ''
            - - 'Bigip Management Security Group:'
              - !Ref 'AWS::StackName'
        - Key: Owner
          Value: !Ref owner
      VpcId: !Ref Vpc
    Type: 'AWS::EC2::SecurityGroup'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: ac6c3010-8d8f-486c-b4f9-74ef5a8e5850
  bigipServiceDiscoveryAccessRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeInstanceStatus'
                  - 'ec2:DescribeAddresses'
                  - 'ec2:AssociateAddress'
                  - 'ec2:DisassociateAddress'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DescribeNetworkInterfaceAttributes'
                  - 'ec2:DescribeRouteTables'
                  - 'ec2:ReplaceRoute'
                  - 'ec2:assignprivateipaddresses'
                  - 'sts:AssumeRole'
                Effect: Allow
                Resource:
                  - '*'
            Version: 2012-10-17
          PolicyName: BigipServiceDiscoveryPolicy
    Type: 'AWS::IAM::Role'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 58f18cac-a8d3-45e1-8f96-0d2cdc8c70ba
  bigipServiceDiscoveryProfile:
    Properties:
      Path: /
      Roles:
        - !Ref bigipServiceDiscoveryAccessRole
    Type: 'AWS::IAM::InstanceProfile'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: ddf14348-d0bd-49cc-897a-426c6fd4fdf3
